{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNJSpbazI1WcafXDcH1YgOs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mbarragan744/clase-IA/blob/main/Quiz%20Segundo%20Corte\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "rGs4GZJPmyoK"
      },
      "outputs": [],
      "source": [
        "#Ejemplo práctico de evaluación de supuestos en regresión lineal\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from statsmodels.stats.stattools import durbin_watson"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear datos sintéticos\n",
        "np.random.seed(42)\n",
        "X1 = np.random.rand(100)\n",
        "X2 = X1 + np.random.normal(0, 0.1, 100)\n",
        "X3 = np.random.rand(100)\n",
        "y =(5 * X1 + 2 * X3 + np.random.normal(0, 0.1, 100))*10\n",
        "\n",
        "df = pd.DataFrame({'X1': X1, 'X2': X2, 'X3': X3})\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "ZZzv9ZcnnSLm",
        "outputId": "47d3af5b-a8fe-4087-9c6d-04292da96782"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          X1        X2        X3\n",
              "0   0.374540  0.383245  0.794811\n",
              "1   0.950714  0.920814  0.502637\n",
              "2   0.731994  0.741170  0.576904\n",
              "3   0.598658  0.399902  0.492518\n",
              "4   0.156019  0.134051  0.195243\n",
              "..       ...       ...       ...\n",
              "95  0.493796  0.412215  0.737897\n",
              "96  0.522733  0.515023  0.554354\n",
              "97  0.427541  0.461656  0.611721\n",
              "98  0.025419  0.053088  0.419600\n",
              "99  0.107891  0.190610  0.247731\n",
              "\n",
              "[100 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6249290f-088e-44ea-b3a4-5ab258bdc1e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X1</th>\n",
              "      <th>X2</th>\n",
              "      <th>X3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.374540</td>\n",
              "      <td>0.383245</td>\n",
              "      <td>0.794811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.950714</td>\n",
              "      <td>0.920814</td>\n",
              "      <td>0.502637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.731994</td>\n",
              "      <td>0.741170</td>\n",
              "      <td>0.576904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.598658</td>\n",
              "      <td>0.399902</td>\n",
              "      <td>0.492518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.156019</td>\n",
              "      <td>0.134051</td>\n",
              "      <td>0.195243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0.493796</td>\n",
              "      <td>0.412215</td>\n",
              "      <td>0.737897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0.522733</td>\n",
              "      <td>0.515023</td>\n",
              "      <td>0.554354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0.427541</td>\n",
              "      <td>0.461656</td>\n",
              "      <td>0.611721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0.025419</td>\n",
              "      <td>0.053088</td>\n",
              "      <td>0.419600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0.107891</td>\n",
              "      <td>0.190610</td>\n",
              "      <td>0.247731</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6249290f-088e-44ea-b3a4-5ab258bdc1e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6249290f-088e-44ea-b3a4-5ab258bdc1e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6249290f-088e-44ea-b3a4-5ab258bdc1e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3921ef4f-6f7a-46d5-8ff1-91fda97b5f76\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3921ef4f-6f7a-46d5-8ff1-91fda97b5f76')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3921ef4f-6f7a-46d5-8ff1-91fda97b5f76 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d2cc21e6-a801-4e74-a91e-5668c2f2f7db\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d2cc21e6-a801-4e74-a91e-5668c2f2f7db button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"X1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2974894110153192,\n        \"min\": 0.005522117123602399,\n        \"max\": 0.9868869366005173,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.06355835028602363,\n          0.8948273504276488,\n          0.7722447692966574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29781935515203023,\n        \"min\": -0.04671513451284226,\n        \"max\": 1.0650692237782484,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.1292137111494066,\n          0.8444797850160289,\n          0.6485496982088492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2876954691052981,\n        \"min\": 0.015456616528867428,\n        \"max\": 0.9900538501042633,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.9626484146779251,\n          0.093981939840869,\n          0.0516817211686077\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "kKLtRyERnU7f",
        "outputId": "ac609419-f5b0-41d8-897b-c55b137a6863"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               X1          X2          X3\n",
              "count  100.000000  100.000000  100.000000\n",
              "mean     0.470181    0.470073    0.528292\n",
              "std      0.297489    0.297819    0.287695\n",
              "min      0.005522   -0.046715    0.015457\n",
              "25%      0.193201    0.210294    0.291829\n",
              "50%      0.464142    0.423111    0.545936\n",
              "75%      0.730203    0.732992    0.776198\n",
              "max      0.986887    1.065069    0.990054"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8c823dc-eeaa-4845-b333-93a79b51cf97\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X1</th>\n",
              "      <th>X2</th>\n",
              "      <th>X3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.470181</td>\n",
              "      <td>0.470073</td>\n",
              "      <td>0.528292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.297489</td>\n",
              "      <td>0.297819</td>\n",
              "      <td>0.287695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.005522</td>\n",
              "      <td>-0.046715</td>\n",
              "      <td>0.015457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.193201</td>\n",
              "      <td>0.210294</td>\n",
              "      <td>0.291829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.464142</td>\n",
              "      <td>0.423111</td>\n",
              "      <td>0.545936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.730203</td>\n",
              "      <td>0.732992</td>\n",
              "      <td>0.776198</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.986887</td>\n",
              "      <td>1.065069</td>\n",
              "      <td>0.990054</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8c823dc-eeaa-4845-b333-93a79b51cf97')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8c823dc-eeaa-4845-b333-93a79b51cf97 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8c823dc-eeaa-4845-b333-93a79b51cf97');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-23b94430-01f5-455d-8404-a18e657ed69a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23b94430-01f5-455d-8404-a18e657ed69a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-23b94430-01f5-455d-8404-a18e657ed69a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"X1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.197687455814936,\n        \"min\": 0.005522117123602399,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.47018074337820936,\n          0.4641424546894926,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.19770343504654,\n        \"min\": -0.04671513451284226,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.47007270736147366,\n          0.42311063967964835,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.18312536898028,\n        \"min\": 0.015456616528867428,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5282922714405118,\n          0.5459356497068486,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#y en entero\n",
        "y = y.astype(int)\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RZCcbDHcnWY-",
        "outputId": "d0784034-91d4-4113-c5ad-64246786cd3a"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([35, 56, 48, 40, 10, 22,  5, 42, 42, 37, 21, 66, 59, 18, 10, 26, 24,\n",
              "       45, 39, 32, 36, 14, 31, 24, 26, 51, 30, 38, 43,  2, 42, 28,  6, 57,\n",
              "       65, 54, 28, 19, 41, 27, 23, 41, 19, 64, 22, 42, 32, 39, 41, 25, 67,\n",
              "       44, 55, 46, 41, 47, 14, 21,  9, 28, 20, 14, 58, 24, 16, 38, 21, 46,\n",
              "       15, 49, 40, 21, 11, 54, 49, 55, 48,  9, 34, 11, 51, 32, 17, 21, 31,\n",
              "       30, 44, 34, 47, 28, 15, 48, 50, 33, 57, 40, 38, 33,  9,  9])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "dfcompleto = pd.concat([df, pd.Series(y, name='y')], axis=1)\n",
        "dfcompleto[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "viI9aRDUnX8e",
        "outputId": "6f34a79c-9913-4764-ec4e-a4dcc8e77e80"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         X1        X2        X3   y\n",
              "0  0.374540  0.383245  0.794811  35\n",
              "1  0.950714  0.920814  0.502637  56\n",
              "2  0.731994  0.741170  0.576904  48\n",
              "3  0.598658  0.399902  0.492518  40\n",
              "4  0.156019  0.134051  0.195243  10\n",
              "5  0.155995  0.191706  0.722452  22\n",
              "6  0.058084  0.205873  0.280772   5\n",
              "7  0.866176  0.814349  0.024316  42\n",
              "8  0.601115  0.520266  0.645472  42\n",
              "9  0.708073  0.657897  0.177111  37"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a041293-8033-4973-8439-405b62611b85\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X1</th>\n",
              "      <th>X2</th>\n",
              "      <th>X3</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.374540</td>\n",
              "      <td>0.383245</td>\n",
              "      <td>0.794811</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.950714</td>\n",
              "      <td>0.920814</td>\n",
              "      <td>0.502637</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.731994</td>\n",
              "      <td>0.741170</td>\n",
              "      <td>0.576904</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.598658</td>\n",
              "      <td>0.399902</td>\n",
              "      <td>0.492518</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.156019</td>\n",
              "      <td>0.134051</td>\n",
              "      <td>0.195243</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.155995</td>\n",
              "      <td>0.191706</td>\n",
              "      <td>0.722452</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.058084</td>\n",
              "      <td>0.205873</td>\n",
              "      <td>0.280772</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.866176</td>\n",
              "      <td>0.814349</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.601115</td>\n",
              "      <td>0.520266</td>\n",
              "      <td>0.645472</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.708073</td>\n",
              "      <td>0.657897</td>\n",
              "      <td>0.177111</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a041293-8033-4973-8439-405b62611b85')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a041293-8033-4973-8439-405b62611b85 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a041293-8033-4973-8439-405b62611b85');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5a9ee1fc-ee35-4457-a854-c7cb165c2d4c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a9ee1fc-ee35-4457-a854-c7cb165c2d4c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5a9ee1fc-ee35-4457-a854-c7cb165c2d4c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfcompleto[:10]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"X1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3158656227180549,\n        \"min\": 0.05808361216819946,\n        \"max\": 0.9507143064099162,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.6011150117432088,\n          0.9507143064099162,\n          0.15599452033620265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27857492936090444,\n        \"min\": 0.13405145165868532,\n        \"max\": 0.9208135713633294,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.52026565145389,\n          0.9208135713633294,\n          0.1917057774873773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.258298230619301,\n        \"min\": 0.02431596643145384,\n        \"max\": 0.7948113035416484,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.6454722959071678,\n          0.5026370931051921,\n          0.7224521152615053\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 5,\n        \"max\": 56,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          42,\n          56,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Calcular la matriz de correlación\n",
        "corr_matrix = df.corr()\n",
        "\n",
        "# Graficar el heatmap\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
        "plt.title(\"Mapa de calor de correlación entre variables\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "RmdNup3rnZkv",
        "outputId": "747171ea-030a-4e28-e095-865d444d28e6"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop('X2', axis=1)\n",
        "df[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "h_3Lk-RZo6jq",
        "outputId": "5232612e-088d-4f23-de2d-c4fdcba03664"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         X1        X3\n",
              "0  0.374540  0.794811\n",
              "1  0.950714  0.502637\n",
              "2  0.731994  0.576904\n",
              "3  0.598658  0.492518\n",
              "4  0.156019  0.195243\n",
              "5  0.155995  0.722452\n",
              "6  0.058084  0.280772\n",
              "7  0.866176  0.024316\n",
              "8  0.601115  0.645472\n",
              "9  0.708073  0.177111"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d3cf50a-2069-489d-b259-af74290caf00\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X1</th>\n",
              "      <th>X3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.374540</td>\n",
              "      <td>0.794811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.950714</td>\n",
              "      <td>0.502637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.731994</td>\n",
              "      <td>0.576904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.598658</td>\n",
              "      <td>0.492518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.156019</td>\n",
              "      <td>0.195243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.155995</td>\n",
              "      <td>0.722452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.058084</td>\n",
              "      <td>0.280772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.866176</td>\n",
              "      <td>0.024316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.601115</td>\n",
              "      <td>0.645472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.708073</td>\n",
              "      <td>0.177111</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d3cf50a-2069-489d-b259-af74290caf00')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d3cf50a-2069-489d-b259-af74290caf00 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d3cf50a-2069-489d-b259-af74290caf00');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c1b68684-1620-4b51-b36f-ac0afb1fc72e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1b68684-1620-4b51-b36f-ac0afb1fc72e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c1b68684-1620-4b51-b36f-ac0afb1fc72e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[:10]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"X1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3158656227180549,\n        \"min\": 0.05808361216819946,\n        \"max\": 0.9507143064099162,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.6011150117432088,\n          0.9507143064099162,\n          0.15599452033620265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.258298230619301,\n        \"min\": 0.02431596643145384,\n        \"max\": 0.7948113035416484,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.6454722959071678,\n          0.5026370931051921,\n          0.7224521152615053\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Entrenado con sklearn"
      ],
      "metadata": {
        "id": "ru9-krBktvRN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importar librerías necesarias\n",
        "from sklearn.linear_model import LinearRegression\n",
        "# Crear el modelo\n",
        "modelo_sklearn = LinearRegression()"
      ],
      "metadata": {
        "id": "hY6ug0Iwpw66"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "modelo_sklearn.fit(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "pxbJz16fr9SY",
        "outputId": "1d529de9-2149-4bf0-ecb9-74500cf4b413"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Entrenado con OLS"
      ],
      "metadata": {
        "id": "Y0BUSgIDt0Td"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Agreguemos una columna de contante al dataframe para usar statmodel\n",
        "X = sm.add_constant(df)\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "z_VfQVBZuLM3",
        "outputId": "8bb63f9f-54f9-4462-b8a7-bc654db52203"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    const        X1        X3\n",
              "0     1.0  0.374540  0.794811\n",
              "1     1.0  0.950714  0.502637\n",
              "2     1.0  0.731994  0.576904\n",
              "3     1.0  0.598658  0.492518\n",
              "4     1.0  0.156019  0.195243\n",
              "..    ...       ...       ...\n",
              "95    1.0  0.493796  0.737897\n",
              "96    1.0  0.522733  0.554354\n",
              "97    1.0  0.427541  0.611721\n",
              "98    1.0  0.025419  0.419600\n",
              "99    1.0  0.107891  0.247731\n",
              "\n",
              "[100 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68e694cc-d144-474d-9ac3-af1da3afc816\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>X1</th>\n",
              "      <th>X3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.374540</td>\n",
              "      <td>0.794811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.950714</td>\n",
              "      <td>0.502637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.731994</td>\n",
              "      <td>0.576904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.598658</td>\n",
              "      <td>0.492518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.156019</td>\n",
              "      <td>0.195243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.493796</td>\n",
              "      <td>0.737897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.522733</td>\n",
              "      <td>0.554354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.427541</td>\n",
              "      <td>0.611721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.025419</td>\n",
              "      <td>0.419600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.107891</td>\n",
              "      <td>0.247731</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68e694cc-d144-474d-9ac3-af1da3afc816')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68e694cc-d144-474d-9ac3-af1da3afc816 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68e694cc-d144-474d-9ac3-af1da3afc816');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-95b495ca-2f0d-4a64-82b4-c2f5d78d1ff6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95b495ca-2f0d-4a64-82b4-c2f5d78d1ff6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-95b495ca-2f0d-4a64-82b4-c2f5d78d1ff6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_8f5f4df4-2f39-43e1-9fd0-ad5574cac609\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8f5f4df4-2f39-43e1-9fd0-ad5574cac609 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"const\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2974894110153192,\n        \"min\": 0.005522117123602399,\n        \"max\": 0.9868869366005173,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.06355835028602363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2876954691052981,\n        \"min\": 0.015456616528867428,\n        \"max\": 0.9900538501042633,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.9626484146779251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#El modelo OLS es statmodel es un modelo para regresión lineal multiple basado en minimos cuadrados ordinarios.\n",
        "model = sm.OLS(y, X).fit()"
      ],
      "metadata": {
        "id": "qr2_VR5fuPQY"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.params"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "OUfNBDDRuRhh",
        "outputId": "053ff400-852b-4808-b6f4-6ac95da7d385"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "const    -0.588465\n",
              "X1       49.885391\n",
              "X3       20.298072\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>const</th>\n",
              "      <td>-0.588465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X1</th>\n",
              "      <td>49.885391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X3</th>\n",
              "      <td>20.298072</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resumen del modelo (incluye valores p y R²)\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TB3GMHcTuUYg",
        "outputId": "dcbc93b1-b8ab-4f51-9b07-e9c735297519"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       0.997\n",
            "Model:                            OLS   Adj. R-squared:                  0.997\n",
            "Method:                 Least Squares   F-statistic:                 1.473e+04\n",
            "Date:                Mon, 28 Apr 2025   Prob (F-statistic):          3.39e-121\n",
            "Time:                        00:08:30   Log-Likelihood:                -131.54\n",
            "No. Observations:                 100   AIC:                             269.1\n",
            "Df Residuals:                      97   BIC:                             276.9\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         -0.5885      0.244     -2.412      0.018      -1.073      -0.104\n",
            "X1            49.8854      0.309    161.234      0.000      49.271      50.499\n",
            "X3            20.2981      0.320     63.445      0.000      19.663      20.933\n",
            "==============================================================================\n",
            "Omnibus:                        1.761   Durbin-Watson:                   2.169\n",
            "Prob(Omnibus):                  0.415   Jarque-Bera (JB):                1.210\n",
            "Skew:                          -0.146   Prob(JB):                        0.546\n",
            "Kurtosis:                       3.453   Cond. No.                         5.34\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"Variable\"] = X.columns\n",
        "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
        "\n",
        "print(vif_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycv0BEe_u_Xt",
        "outputId": "13a46420-b3c3-4d0d-c8f0-cc4dc3858a3c"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Variable       VIF\n",
            "0    const  7.101841\n",
            "1       X1  1.000818\n",
            "2       X3  1.000818\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Conclusiones del Modelo OLS\n",
        "\n",
        "## **1. Bondad de ajuste**\n",
        "\n",
        "**R-squared** = 0.997, **Adjusted R²** = 0.997\n",
        "\n",
        "Este no cambió al eliminar X2, por lo que sigue siendo un excelente ajuste. El modelo explica el 99.7% de la variabilidad en la variable dependiente y.\n",
        "\n",
        "##**2. Significancia global del modelo**\n",
        "**F-statistic:** 1.473e+04. (antes = 1.028e+04)\n",
        "\n",
        "**p-value (Prob F):** 3.39e-121. (antes = 2.13e-119)\n",
        "\n",
        "Ambos aumentaron, por lo que el modelo sigue siendo estadisticamente significativo (p ≪ 0.05).\n",
        "\n",
        "##**3. Significancia individual de los predictores**\n",
        "\n",
        "|Variable|Coef.|P-valor|¿Significativo?|\n",
        "|----------|----------|----------|----------|\n",
        "|X1|+4.98|0.000|Sí|\n",
        "|X3|+2.029|0.000|Sí|\n",
        "\n",
        "X1 y X3 siguen siendo altamente significativos.\n",
        "\n",
        "##**4. Multicolinealidad potencial**\n",
        "\n",
        "X1 y X3 tiene un VIF≈1, por lo que no tienen correlacion\n",
        "\n",
        "\n",
        "\n",
        "##**5. Independencia de los errores**\n",
        "\n",
        "Durbin-Watson = 2.169\n",
        "Está adecuado. Indica que los residuos no están autocorrelacionados.\n",
        "\n",
        "##**6. Normalidad de los residuos**\n",
        "Omnibus = 1.761, Jarque-Bera p = 1.210\n",
        "\n",
        "Los residuos siguen una distribución normal (p > 0.05), otro punto a favor.\n",
        "\n",
        "##**7. Constante (intercepto)**\n",
        "\n",
        "significativo (p = 0.018 )"
      ],
      "metadata": {
        "id": "Qxgw_uNOp6mI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# QQ-Plot de los residuos\n",
        "residuals = model.resid\n",
        "sm.qqplot(residuals, line='45', fit=True)\n",
        "plt.title(\"QQ-Plot de los residuos\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "rD2Mioe_yDT2",
        "outputId": "1a38c94b-2674-4db5-cdf0-df71a149900c"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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yqlTp1iwYAHbtm0DoHTp0tZBzPv37+f555+3tkql1ahRo/Dz86NZs2asWLGCs2fPsmnTJlq0aIGDgwNffvml9domTZrwww8/sHnzZg4ePEi3bt1wdHS0vl6qVCnu3LnDpEmTOHXqFD/88APTpk1LVz0Jn82BAwc4duwYV65cSdQ6lJLBgwfzxx9/0LdvX/bt28fx48cJDQ21DiheunQpEydOZN++ffzzzz/Mnj0bs9nMY489lu76ROyNwo1ILtKiRQuWLl3K6tWrqVGjBrVq1WL8+PEUL14csHSXhIaGUqBAARo0aEBwcDAlS5bkl19+SfW5JpOJ5cuX06BBA3r06MGjjz5K586d+eeffyhcuDAATz/9NC1btqRx48b4+Pjw888/J3mOs7Mzq1evxtfXl9atW1OhQgU+/fRTa6AYN24cBQoUoE6dOrRr144WLVpQtWrVdH0GhQoVYvv27TRu3JjXXnuNwMBAGjZsSHx8PPv27bOOUwIYOnQoDRs2pG3btrRp04aOHTsmGjtTqVIlxo0bx5gxYyhfvjw//vgjo0ePTlc9AK+88gqPPfYY1atXx8fHh61bt973nooVK7Jx40b+/vtv6tevT5UqVRg2bBhFihQBLN2BCxcupEmTJpQpU4Zp06bx888/U65cuXTXJ2JvTMbDdvyKiNi57777jjfeeINffvklyUrBImJ/1HIjIrler169mDt3Ln/99Re3bt2ydTki8pDUciMiIiI5ilpuREREJEdRuBEREZEcReFGREREchSFGxEREclRFG5EREQkR1G4ERERkRxF4UZERERyFIUbERERyVEUbkRERCRH+T8D2XVgO4UkpAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gráfico de residuos vs. valores ajustados\n",
        "fitted_vals = model.fittedvalues\n",
        "plt.scatter(fitted_vals, residuals)\n",
        "plt.axhline(0, color='red', linestyle='--')\n",
        "plt.xlabel(\"Valores ajustados\")\n",
        "plt.ylabel(\"Residuos\")\n",
        "plt.title(\"Residuos vs. valores ajustados\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "cvL-M8VTyI3j",
        "outputId": "9cdfb36b-c3ec-4e32-b42b-089554b41408"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como el patron es aleatorio y horizontal alrededor de 0, se cummple el supuesto de homocedasticidad."
      ],
      "metadata": {
        "id": "e88pkzQSyPk9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Durbin-Watson\n",
        "dw = durbin_watson(residuals)\n",
        "print(f\"Durbin-Watson: {dw:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VpO5ASm7ygsP",
        "outputId": "80280b7b-058b-4a3d-cc8b-212acc62a781"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Durbin-Watson: 2.17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "DW = 2.17 → Está muy cerca de 2. Esto indica que no hay evidencia de autocorrelación en los residuos."
      ],
      "metadata": {
        "id": "rdgzKfNbyliX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Error Estándar Residual (RSE)\n",
        "n = len(y)\n",
        "p = X.shape[1] - 1  # número de predictores\n",
        "RSS = np.sum(residuals ** 2)\n",
        "RSE = np.sqrt(RSS / (n - p - 1))\n",
        "print(f\"Error Estándar Residual (RSE): {RSE:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NmQZY0ZiyqsQ",
        "outputId": "ba14aa87-82d1-408c-fb4b-efa7ffd3468d"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error Estándar Residual (RSE): 0.9154\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cálculo manual de R²\n",
        "y_mean = np.mean(y)\n",
        "TSS = np.sum((y - y_mean) ** 2)\n",
        "R_squared = 1 - RSS / TSS\n",
        "print(f\"Coeficiente de Determinación (R²): {R_squared:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TXGWhmCbyshA",
        "outputId": "e461619d-7535-44f2-8281-66e810d2f5dc"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente de Determinación (R²): 0.9967\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "RSE = 0.9154\n",
        "\n",
        "Indica que las predicciones están relativamente cercanas a los valores reales\n",
        "\n",
        "Es coherente con el R² = 0.997 que obtuviste: excelente ajuste"
      ],
      "metadata": {
        "id": "SJBNeGzxznu_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cálculo manual de Error medio cuadrático con los dato de entrenamiento X y y\n",
        "y_pred = model.predict(X)\n",
        "n = len(y)\n",
        "MSE = (1/n)*(np.sum((y - y_pred) ** 2))\n",
        "print(f\"Error medio cuadrático: {MSE:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dOjqNvz-0MFb",
        "outputId": "48cb4b1c-6f3f-486c-cca4-cb8c8c13539e"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error medio cuadrático: 0.8129\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y,np.array(y_pred).astype(int)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQX9OYRN0ODL",
        "outputId": "3b4e7597-bd5c-4a12-d85a-fd2c61bc73f3"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([35, 56, 48, 40, 10, 22,  5, 42, 42, 37, 21, 66, 59, 18, 10, 26, 24,\n",
              "        45, 39, 32, 36, 14, 31, 24, 26, 51, 30, 38, 43,  2, 42, 28,  6, 57,\n",
              "        65, 54, 28, 19, 41, 27, 23, 41, 19, 64, 22, 42, 32, 39, 41, 25, 67,\n",
              "        44, 55, 46, 41, 47, 14, 21,  9, 28, 20, 14, 58, 24, 16, 38, 21, 46,\n",
              "        15, 49, 40, 21, 11, 54, 49, 55, 48,  9, 34, 11, 51, 32, 17, 21, 31,\n",
              "        30, 44, 34, 47, 28, 15, 48, 50, 33, 57, 40, 38, 33,  9,  9]),\n",
              " array([34, 57, 47, 39, 11, 21,  8, 43, 42, 38, 19, 67, 59, 17,  8, 27, 23,\n",
              "        45, 40, 31, 35, 14, 31, 24, 25, 49, 28, 39, 40,  3, 42, 28,  5, 57,\n",
              "        65, 54, 28, 18, 40, 27, 21, 40, 18, 63, 22, 42, 31, 38, 40, 24, 65,\n",
              "        44, 53, 45, 40, 46, 13, 20,  7, 27, 19, 13, 57, 24, 16, 37, 22, 43,\n",
              "        15, 50, 38, 20, 10, 53, 49, 55, 48,  9, 33, 10, 51, 32, 16, 22, 31,\n",
              "        29, 44, 34, 46, 28, 16, 49, 50, 33, 57, 39, 36, 33,  9,  9]))"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#graficar X1, X3 y y\n",
        "\n",
        "import plotly.express as px\n",
        "\n",
        "# Asumiendo que ya tienes `combined_df` con las columnas 'X1', 'X3' y 'y'\n",
        "fig = px.scatter_3d(dfcompleto, x='X1', y='X3', z='y', color='y', opacity=0.8)\n",
        "\n",
        "# Etiquetas\n",
        "fig.update_layout(\n",
        "    scene=dict(\n",
        "        xaxis_title='X1',\n",
        "        yaxis_title='X3',\n",
        "        zaxis_title='y'\n",
        "    ),\n",
        "    margin=dict(l=0, r=0, b=0, t=40),\n",
        "    title=\"Gráfico 3D Interactivo\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "gPc6SOPl0Qcj",
        "outputId": "644fffae-5143-405a-eeea-9bb60f787b87"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"0fc352e2-ccb4-44c6-ba12-9da15fa670c4\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0fc352e2-ccb4-44c6-ba12-9da15fa670c4\")) {                    Plotly.newPlot(                        \"0fc352e2-ccb4-44c6-ba12-9da15fa670c4\",                        [{\"hovertemplate\":\"X1=%{x}\\u003cbr\\u003eX3=%{y}\\u003cbr\\u003ey=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[35,56,48,40,10,22,5,42,42,37,21,66,59,18,10,26,24,45,39,32,36,14,31,24,26,51,30,38,43,2,42,28,6,57,65,54,28,19,41,27,23,41,19,64,22,42,32,39,41,25,67,44,55,46,41,47,14,21,9,28,20,14,58,24,16,38,21,46,15,49,40,21,11,54,49,55,48,9,34,11,51,32,17,21,31,30,44,34,47,28,15,48,50,33,57,40,38,33,9,9],\"coloraxis\":\"coloraxis\",\"opacity\":0.8,\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"x\":[0.3745401188473625,0.9507143064099162,0.7319939418114051,0.5986584841970366,0.15601864044243652,0.15599452033620265,0.05808361216819946,0.8661761457749352,0.6011150117432088,0.7080725777960455,0.020584494295802447,0.9699098521619943,0.8324426408004217,0.21233911067827616,0.18182496720710062,0.18340450985343382,0.3042422429595377,0.5247564316322378,0.43194501864211576,0.2912291401980419,0.6118528947223795,0.13949386065204183,0.29214464853521815,0.3663618432936917,0.45606998421703593,0.7851759613930136,0.19967378215835974,0.5142344384136116,0.5924145688620425,0.046450412719997725,0.6075448519014384,0.17052412368729153,0.06505159298527952,0.9488855372533332,0.9656320330745594,0.8083973481164611,0.3046137691733707,0.09767211400638387,0.6842330265121569,0.4401524937396013,0.12203823484477883,0.4951769101112702,0.034388521115218396,0.9093204020787821,0.2587799816000169,0.662522284353982,0.31171107608941095,0.5200680211778108,0.5467102793432796,0.18485445552552704,0.9695846277645586,0.7751328233611146,0.9394989415641891,0.8948273504276488,0.5978999788110851,0.9218742350231168,0.0884925020519195,0.1959828624191452,0.045227288910538066,0.32533033076326434,0.388677289689482,0.2713490317738959,0.8287375091519293,0.3567533266935893,0.28093450968738076,0.5426960831582485,0.14092422497476265,0.8021969807540397,0.07455064367977082,0.9868869366005173,0.7722447692966574,0.1987156815341724,0.005522117123602399,0.8154614284548342,0.7068573438476171,0.7290071680409873,0.7712703466859457,0.07404465173409036,0.3584657285442726,0.11586905952512971,0.8631034258755935,0.6232981268275579,0.3308980248526492,0.06355835028602363,0.3109823217156622,0.32518332202674705,0.7296061783380641,0.6375574713552131,0.8872127425763265,0.4722149251619493,0.1195942459383017,0.713244787222995,0.7607850486168974,0.5612771975694962,0.770967179954561,0.49379559636439074,0.5227328293819941,0.42754101835854963,0.02541912674409519,0.10789142699330445],\"y\":[0.7948113035416484,0.5026370931051921,0.5769038846263591,0.4925176938188639,0.1952429877980445,0.7224521152615053,0.2807723624408558,0.02431596643145384,0.6454722959071678,0.17711067940704894,0.9404585843529143,0.9539285770025874,0.9148643902204485,0.3701587002554444,0.015456616528867428,0.9283185625877254,0.42818414831731433,0.9666548190436696,0.9636199770892528,0.8530094554673601,0.2944488920695857,0.38509772860192526,0.8511366715168569,0.31692200515627766,0.1694927466860925,0.5568012624583502,0.936154774160781,0.696029796674973,0.570061170089365,0.09717649377076854,0.6150072266991697,0.9900538501042633,0.14008401523652403,0.5183296523637367,0.8773730719279554,0.7407686177542044,0.697015740995268,0.7024840839871093,0.35949115121975517,0.29359184426449336,0.8093611554785136,0.8101133946791808,0.8670723185801037,0.9132405525564713,0.5113423988609378,0.5015162946871996,0.7982951789667752,0.6499639307777652,0.7019668772577033,0.795792669436101,0.8900053418175663,0.3379951568515358,0.375582952639944,0.093981939840869,0.578280140996174,0.035942273796742086,0.46559801813246016,0.5426446347075766,0.2865412521282844,0.5908332605690108,0.03050024993904943,0.03734818874921442,0.8226005606596583,0.3601906414112629,0.12706051265188478,0.5222432600548044,0.7699935530986108,0.21582102749684318,0.6228904758190003,0.085347464993768,0.0516817211686077,0.531354631568148,0.5406351216101065,0.6374299014982066,0.7260913337226615,0.9758520794625346,0.5163003483011953,0.32295647294124596,0.7951861947687037,0.2708322512620742,0.4389714207056361,0.07845638134226596,0.02535074341545751,0.9626484146779251,0.8359801205122058,0.695974206093698,0.4089529444142699,0.17329432007084578,0.15643704267108605,0.25024289816459533,0.5492266647061205,0.7145959227000623,0.6601973767177313,0.27993389694594284,0.9548652806631941,0.7378969166957685,0.5543540525114007,0.6117207462343522,0.4196000624277899,0.24773098950115746],\"z\":[35,56,48,40,10,22,5,42,42,37,21,66,59,18,10,26,24,45,39,32,36,14,31,24,26,51,30,38,43,2,42,28,6,57,65,54,28,19,41,27,23,41,19,64,22,42,32,39,41,25,67,44,55,46,41,47,14,21,9,28,20,14,58,24,16,38,21,46,15,49,40,21,11,54,49,55,48,9,34,11,51,32,17,21,31,30,44,34,47,28,15,48,50,33,57,40,38,33,9,9],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"X1\"}},\"yaxis\":{\"title\":{\"text\":\"X3\"}},\"zaxis\":{\"title\":{\"text\":\"y\"}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"y\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":40,\"l\":0,\"r\":0,\"b\":0},\"title\":{\"text\":\"Gráfico 3D Interactivo\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('0fc352e2-ccb4-44c6-ba12-9da15fa670c4');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}